"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const api = require("./api");
const resolvers_1 = require("./resolvers");
function getGlobalPackageDir() {
    for (const resolver of resolvers_1.resolvers) {
        const dir = resolver();
        if (dir) {
            return dir;
        }
    }
    return undefined;
}
function getLocalPackageDir() {
    return path_1.resolve(__dirname, '..', '..');
}
function getAllPlugins(rootDir) {
    return new Promise(resolve => {
        if (rootDir) {
            fs_1.readdir(rootDir, (_, files) => {
                const prefix = 'piral-cli-';
                const pluginPaths = (files || [])
                    .filter(m => m.startsWith(prefix) && m.length > prefix.length)
                    .map(m => path_1.join(rootDir, m))
                    .filter(m => fs_1.statSync(m).isDirectory());
                resolve(pluginPaths);
            });
        }
        else {
            resolve([]);
        }
    });
}
function includeUnique(localPlugins, value) {
    const globalPlugin = path_1.basename(value);
    for (const pluginPath of localPlugins) {
        const localPlugin = path_1.basename(pluginPath);
        if (localPlugin === globalPlugin) {
            return false;
        }
    }
    return true;
}
function loadPlugins() {
    return __awaiter(this, void 0, void 0, function* () {
        const globalDir = getGlobalPackageDir();
        const localDir = getLocalPackageDir();
        const globalPlugins = yield getAllPlugins(globalDir);
        const localPlugins = yield getAllPlugins(localDir !== globalDir && localDir);
        const allPlugins = [...localPlugins, ...globalPlugins.filter(plugin => includeUnique(localPlugins, plugin))];
        for (const pluginPath of allPlugins) {
            try {
                const plugin = require(pluginPath);
                if (typeof plugin === 'function') {
                    plugin(api);
                }
            }
            catch (ex) {
                console.warn(`Failed to load plugin from "${pluginPath}": ${ex}`);
            }
        }
    });
}
exports.loadPlugins = loadPlugins;
//# sourceMappingURL=plugin.js.map