"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
exports.templateTypeKeys = ['default', 'empty'];
exports.forceOverwriteKeys = Object.keys(common_1.ForceOverwrite).filter(m => typeof common_1.ForceOverwrite[m] === 'number');
function valueOfForceOverwrite(key) {
    for (const forceOverwriteKey of exports.forceOverwriteKeys) {
        if (forceOverwriteKey === key) {
            return common_1.ForceOverwrite[forceOverwriteKey];
        }
    }
    return common_1.ForceOverwrite.no;
}
exports.valueOfForceOverwrite = valueOfForceOverwrite;
function keyOfForceOverwrite(value) {
    for (const forceOverwriteKey of exports.forceOverwriteKeys) {
        if (common_1.ForceOverwrite[forceOverwriteKey] === value) {
            return forceOverwriteKey;
        }
    }
    return exports.forceOverwriteKeys[0];
}
exports.keyOfForceOverwrite = keyOfForceOverwrite;
exports.piletLanguageKeys = Object.keys(common_1.PiletLanguage).filter(m => typeof common_1.PiletLanguage[m] === 'number');
function valueOfPiletLanguage(key) {
    for (const piletLanguageKey of exports.piletLanguageKeys) {
        if (piletLanguageKey === key) {
            return common_1.PiletLanguage[piletLanguageKey];
        }
    }
    return common_1.PiletLanguage.ts;
}
exports.valueOfPiletLanguage = valueOfPiletLanguage;
function keyOfPiletLanguage(value) {
    for (const piletLanguageKey of exports.piletLanguageKeys) {
        if (common_1.PiletLanguage[piletLanguageKey] === value) {
            return piletLanguageKey;
        }
    }
    return exports.piletLanguageKeys[0];
}
exports.keyOfPiletLanguage = keyOfPiletLanguage;
//# sourceMappingURL=helpers.js.map