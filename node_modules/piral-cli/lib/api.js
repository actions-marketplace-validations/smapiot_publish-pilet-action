"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
const commands_1 = require("./commands");
const rules_1 = require("./rules");
function findAll(commandName, cb) {
    for (let i = commands_1.commands.all.length; i--;) {
        const command = commands_1.commands.all[i];
        if (command.name === commandName) {
            cb(command, i);
        }
    }
}
function withCommand(command) {
    commands_1.commands.all.push(command);
    return this;
}
exports.withCommand = withCommand;
function withoutCommand(commandName) {
    findAll(commandName, (_, i) => commands_1.commands.all.splice(i, 1));
    return this;
}
exports.withoutCommand = withoutCommand;
function withFlags(commandName, setter) {
    if (typeof commandName !== 'string') {
        common_1.logWarn('Invalid argument for "commandName" - no flags added.');
    }
    else if (typeof setter !== 'function') {
        common_1.logWarn('Invalid argument for "setter" - no flags added.');
    }
    else {
        findAll(commandName, command => {
            const current = command.flags || (x => x);
            command.flags = argv => current(setter(argv));
        });
    }
    return this;
}
exports.withFlags = withFlags;
function wrapCommand(commandName, wrapper) {
    if (typeof commandName !== 'string') {
        common_1.logWarn('Invalid argument for "commandName" - no command wrapped.');
    }
    else if (typeof wrapper !== 'function') {
        common_1.logWarn('Invalid argument for "wrapper" - no command wrapped.');
    }
    else {
        findAll(commandName, command => {
            const current = command.run;
            command.run = args => wrapper(args, current);
        });
    }
    return this;
}
exports.wrapCommand = wrapCommand;
function beforeCommand(commandName, before) {
    if (typeof commandName !== 'string') {
        common_1.logWarn('Invalid argument for "commandName" - no before command added.');
    }
    else if (typeof before !== 'function') {
        common_1.logWarn('Invalid argument for "before" - no before command added.');
    }
    else {
        wrapCommand(commandName, (args, current) => __awaiter(this, void 0, void 0, function* () {
            yield before(args);
            yield current(args);
        }));
    }
    return this;
}
exports.beforeCommand = beforeCommand;
function afterCommand(commandName, after) {
    if (typeof commandName !== 'string') {
        common_1.logWarn('Invalid argument for "commandName" - no after command added.');
    }
    else if (typeof after !== 'function') {
        common_1.logWarn('Invalid argument for "after" - no after command added.');
    }
    else {
        wrapCommand(commandName, (args, current) => __awaiter(this, void 0, void 0, function* () {
            yield current(args);
            yield after(args);
        }));
    }
    return this;
}
exports.afterCommand = afterCommand;
function withPiralRule(name, run) {
    if (typeof name !== 'string') {
        common_1.logWarn('Invalid argument for "name" - no Piral rule added.');
    }
    else if (typeof run !== 'function') {
        common_1.logWarn('Invalid argument for "run" - no Piral rule added.');
    }
    else {
        rules_1.addPiralRule({ name, run });
    }
    return this;
}
exports.withPiralRule = withPiralRule;
function withPiletRule(name, run) {
    if (typeof name !== 'string') {
        common_1.logWarn('Invalid argument for "name" - no pilet rule added.');
    }
    else if (typeof run !== 'function') {
        common_1.logWarn('Invalid argument for "run" - no pilet rule added.');
    }
    else {
        rules_1.addPiletRule({ name, run });
    }
    return this;
}
exports.withPiletRule = withPiletRule;
//# sourceMappingURL=api.js.map