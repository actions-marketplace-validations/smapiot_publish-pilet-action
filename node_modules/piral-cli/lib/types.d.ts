import { Argv, Arguments } from 'yargs';
export interface ToolCommandRunner<U> {
    (args: Arguments<U>): void | Promise<void>;
}
export interface ToolCommandWrapper<U> {
    (args: Arguments<U>, runner: ToolCommandRunner<U>): void | Promise<void>;
}
export interface ToolCommandFlagsSetter<T> {
    (argv: Argv<T>): Argv<T>;
}
export interface ToolCommand<T = any, U = any> {
    name: string;
    description: string;
    arguments: Array<string>;
    flags?: ToolCommandFlagsSetter<T>;
    alias: Array<string>;
    run: ToolCommandRunner<U>;
}
export interface ListCommands {
    all: Array<ToolCommand<any>>;
    pilet: Array<ToolCommand<any>>;
    piral: Array<ToolCommand<any>>;
}
export interface CliPluginApi {
    withCommand<T, U>(command: ToolCommand<T, U>): CliPluginApi;
    withoutCommand(commandName: string): CliPluginApi;
    withFlags<T>(commandName: string, setter: ToolCommandFlagsSetter<T>): CliPluginApi;
    wrapCommand<U>(commandName: string, wrapper: ToolCommandWrapper<U>): CliPluginApi;
    beforeCommand<U>(commandName: string, before: ToolCommandRunner<U>): CliPluginApi;
    afterCommand<U>(commandName: string, after: ToolCommandRunner<U>): CliPluginApi;
    withPiralRule(ruleName: string, runner: RuleRunner<PiralRuleContext>): CliPluginApi;
    withPiletRule(ruleName: string, runner: RuleRunner<PiletRuleContext>): CliPluginApi;
}
export interface CliPlugin {
    (api: CliPluginApi): void;
}
export interface RuleContext {
    error(message: string): void;
    warning(message: string): void;
    logLevel?: 1 | 2 | 3;
    root: string;
    entry: string;
    dependencies: Record<string, string>;
    devDependencies: Record<string, string>;
    peerDependencies: Record<string, string>;
}
export interface RuleRunner<T extends RuleContext> {
    (context: T, options: any): void | Promise<void>;
}
export interface Rule<T extends RuleContext> {
    run: RuleRunner<T>;
    name: string;
}
export interface PiralRuleContext extends RuleContext {
    info: PiletsInfo;
}
export interface PiletRuleContext extends RuleContext {
    data: PiralData;
}
export interface TemplateFileLocation {
    from: string;
    to: string;
    deep?: boolean;
}
export interface PiletsInfo {
    files: Array<string | TemplateFileLocation>;
    externals: Array<string>;
    devDependencies: Record<string, string | true>;
    scripts: Record<string, string>;
    validators: Record<string, any>;
    preScaffold: string;
    postScaffold: string;
    preUpgrade: string;
    postUpgrade: string;
}
export interface PiralData {
    appFile: string;
    appPackage: any;
}
