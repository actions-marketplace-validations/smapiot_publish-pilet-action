export declare function isLocalPackage(baseDir: string, fullName: string): boolean;
export declare function isGitPackage(fullName: string): boolean;
export declare function installDependencies(target?: string, ...flags: Array<string>): Promise<void>;
export declare function installPackage(packageRef: string, target?: string, ...flags: Array<string>): Promise<void>;
export declare function createPackage(target?: string, ...flags: Array<string>): Promise<void>;
export declare function findLatestVersion(packageName: string): Promise<string>;
export declare function makeGitUrl(fullName: string): string;
export declare type PackageType = 'registry' | 'file' | 'git';
/**
 * Looks at the provided package name and normalizes it
 * resulting in the following tuple:
 * [
 *   normalized / real package name,
 *   found package version / version identifier,
 *   indicator if an explicit version was used,
 *   the used package type
 * ]
 * @param baseDir The base directory of the current operation.
 * @param fullName The provided package name.
 */
export declare function dissectPackageName(baseDir: string, fullName: string): Promise<[string, string, boolean, PackageType]>;
/**
 * Looks at the current package name / version and
 * normalizes it resulting in the following tuple:
 * [
 *   normalized / real package name,
 *   found package version / version identifier,
 * ]
 * @param baseDir The base directory of the current operation.
 * @param sourceName The used package name.
 * @param sourceVersion The used package version.
 * @param desired The desired package version.
 */
export declare function getCurrentPackageDetails(baseDir: string, sourceName: string, sourceVersion: string, desired: string): Promise<[string, undefined | string]>;
export declare function combinePackageRef(name: string, version: string, type: PackageType): string;
export declare function getPackageName(root: string, name: string, type: PackageType): Promise<string>;
export declare function getFilePackageVersion(sourceName: string): string;
export declare function getGitPackageVersion(sourceName: string): string;
export declare function getPackageVersion(hadVersion: boolean, sourceName: string, sourceVersion: string, type: PackageType): string;
