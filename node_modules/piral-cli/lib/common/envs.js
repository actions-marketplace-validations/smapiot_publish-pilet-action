"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const io_1 = require("./io");
const info_1 = require("./info");
function readNextPackageJson(dir) {
    return __awaiter(this, void 0, void 0, function* () {
        const path = yield io_1.findFile(dir, 'package.json');
        if (path) {
            return require(path);
        }
        return {
            name: '',
            version: '',
            description: '',
        };
    });
}
function setStandardEnvs(options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageJson = yield readNextPackageJson(options.target || process.cwd());
        process.env.BUILD_TIME = new Date().toDateString();
        process.env.BUILD_TIME_FULL = new Date().toISOString();
        process.env.BUILD_PCKG_VERSION = packageJson.version;
        process.env.BUILD_PCKG_NAME = packageJson.name;
        if (options.develop) {
            process.env.DEBUG_PILET = options.develop ? info_1.debugPiletApi : '';
        }
        else {
            delete process.env.DEBUG_PILET;
        }
        if (options.production) {
            process.env.NODE_ENV = 'production';
        }
        else if (!process.env.NODE_ENV) {
            process.env.NODE_ENV = 'development';
        }
        if (options.dependencies && options.dependencies.length) {
            const excludedDependencies = ['piral', 'piral-core', options.piral];
            const dependencies = options.dependencies.filter(m => !excludedDependencies.includes(m));
            process.env.SHARED_DEPENDENCIES = dependencies.join(',');
        }
        else {
            process.env.SHARED_DEPENDENCIES = '';
        }
    });
}
exports.setStandardEnvs = setStandardEnvs;
//# sourceMappingURL=envs.js.map