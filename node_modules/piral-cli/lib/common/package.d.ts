import { ForceOverwrite } from './io';
import { PiletLanguage } from './language';
import { PiletsInfo, TemplateFileLocation } from '../types';
export interface FileInfo {
    path: string;
    hash: string;
    changed: boolean;
}
export declare function findPackageRoot(pck: string, baseDir: string): string;
export declare function readPiralPackage(root: string, name: string): Promise<any>;
export declare function getPiralPackage(app: string, language: PiletLanguage): {
    app: string;
    scripts: {
        start: string;
        build: string;
    };
    pilets: {
        scripts: {
            build: string;
            start: string;
        };
        files: (string | TemplateFileLocation)[];
        externals: string[];
        devDependencies: Record<string, string | true>;
        validators: Record<string, any>;
        preScaffold: string;
        postScaffold: string;
        preUpgrade: string;
        postUpgrade: string;
    };
    devDependencies: {
        'piral-cli': string;
        typescript: string;
        '@types/react': string;
        '@types/react-dom': string;
        '@types/react-router': string;
        '@types/react-router-dom': string;
        '@types/node': string;
    } | {
        'piral-cli': string;
        typescript?: undefined;
        '@types/react'?: undefined;
        '@types/react-dom'?: undefined;
        '@types/react-router'?: undefined;
        '@types/react-router-dom'?: undefined;
        '@types/node'?: undefined;
    };
};
export declare function getFileStats(root: string, name: string, files?: Array<string | TemplateFileLocation>): Promise<FileInfo[]>;
export declare function copyScaffoldingFiles(source: string, target: string, files: Array<string | TemplateFileLocation>): Promise<void>;
export declare function copyPiralFiles(root: string, name: string, files: Array<string | TemplateFileLocation>, forceOverwrite: ForceOverwrite, originalFiles?: Array<FileInfo>): Promise<void>;
export declare function getPiletsInfo(piralInfo: any): PiletsInfo;
export declare function retrievePiralRoot(baseDir: string, entry: string): Promise<string>;
export declare function findPackageVersion(rootPath: string, packageName: string): Promise<any>;
export declare function retrievePiletsInfo(entryFile: string): Promise<{
    name: any;
    version: any;
    dependencies: {
        std: any;
        dev: any;
        peer: any;
    };
    root: string;
    files: (string | TemplateFileLocation)[];
    externals: string[];
    devDependencies: Record<string, string | true>;
    scripts: Record<string, string>;
    validators: Record<string, any>;
    preScaffold: string;
    postScaffold: string;
    preUpgrade: string;
    postUpgrade: string;
}>;
export declare function patchPiletPackage(root: string, name: string, version: string, piralInfo: any, language?: PiletLanguage): Promise<(string | TemplateFileLocation)[]>;
export declare function retrievePiletData(target: string, app?: string): Promise<{
    dependencies: any;
    devDependencies: any;
    peerDependencies: any;
    appFile: string;
    appPackage: any;
    root: string;
}>;
