"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const build_pilet_1 = require("./build-pilet");
const common_1 = require("../common");
exports.publishPiletDefaults = {
    source: '*.tgz',
    url: '',
    apiKey: '',
    fresh: false,
};
function getFiles(baseDir, source, fresh) {
    return __awaiter(this, void 0, void 0, function* () {
        if (fresh) {
            const details = require(path_1.join(baseDir, 'package.json'));
            yield build_pilet_1.buildPilet(baseDir, {
                target: details.main,
                fresh: true,
            });
            const file = yield common_1.createPiletPackage(baseDir, '.', '.');
            return [file];
        }
        return yield common_1.matchFiles(baseDir, source);
    });
}
function publishPilet(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { source = exports.publishPiletDefaults.source, url = exports.publishPiletDefaults.url, apiKey = exports.publishPiletDefaults.apiKey, fresh = exports.publishPiletDefaults.fresh, } = options;
        const files = yield getFiles(baseDir, source, fresh);
        if (!url) {
            throw new Error('Incomplete configuration. Missing URL of the pilet feed!');
        }
        if (files.length === 0) {
            throw new Error(`No files found at '${source}'.`);
        }
        for (const file of files) {
            const fileName = path_1.relative(baseDir, file);
            const content = yield common_1.readBinary(baseDir, fileName);
            if (!content) {
                common_1.logWarn(`Content of '%s' cannot be read.`, fileName);
                continue;
            }
            common_1.logInfo(`Publishing '%s' to '%s' ...`, file, url);
            const result = yield common_1.postFile(url, apiKey, content);
            if (result) {
                common_1.logDone(`Uploaded successfully!`);
            }
            else {
                throw new Error('Could not upload.');
            }
        }
        common_1.logInfo('All done!');
    });
}
exports.publishPilet = publishPilet;
//# sourceMappingURL=publish-pilet.js.map