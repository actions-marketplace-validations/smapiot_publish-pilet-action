"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const common_1 = require("../common");
exports.upgradePiletDefaults = {
    version: 'latest',
    target: '.',
    forceOverwrite: common_1.ForceOverwrite.no,
};
function upgradePilet(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { version = exports.upgradePiletDefaults.version, target = exports.upgradePiletDefaults.target, forceOverwrite = exports.upgradePiletDefaults.forceOverwrite, } = options;
        const root = path_1.resolve(baseDir, target);
        const valid = yield common_1.checkExistingDirectory(root);
        if (!valid) {
            throw new Error('The provided target is not a valid. It must be a directory containing a package.json.');
        }
        const pckg = yield common_1.readJson(root, 'package.json');
        const { devDependencies = {}, piral } = pckg;
        if (piral && typeof piral === 'object') {
            const sourceName = piral.name;
            if (!sourceName || typeof sourceName !== 'string') {
                throw new Error(`Missing "name" <string> in the "piral" section of the "package.json" file. Aborting.`);
            }
            const currentVersion = devDependencies[sourceName];
            if (!currentVersion || typeof currentVersion !== 'string') {
                throw new Error(`Invalid reference to the Piral instance in the "package.json" file. Aborting.`);
            }
            const [packageRef, packageVersion] = yield common_1.getCurrentPackageDetails(baseDir, sourceName, currentVersion, version);
            const originalFiles = yield common_1.getFileStats(root, sourceName, piral.files);
            common_1.logInfo(`Updating NPM package to %s ...`, packageRef);
            yield common_1.installPackage(packageRef, root, '--no-save', '--no-package-lock');
            const piralInfo = yield common_1.readPiralPackage(root, sourceName);
            const { piralCLI = { generated: false } } = piralInfo;
            if (!piralCLI.generated) {
                common_1.logWarn(`The used Piral instance does not seem to be a proper development package.
Please make sure to build your development package with the Piral CLI using "piral build".`);
            }
            const { preUpgrade, postUpgrade } = common_1.getPiletsInfo(piralInfo);
            if (preUpgrade) {
                common_1.logInfo(`Running preUpgrade script ...`);
                yield common_1.runScript(preUpgrade, root);
            }
            common_1.logInfo(`Taking care of templating ...`);
            const files = yield common_1.patchPiletPackage(root, sourceName, packageVersion, piralInfo);
            yield common_1.copyPiralFiles(root, sourceName, files, forceOverwrite, originalFiles);
            common_1.logInfo(`Updating dependencies ...`);
            yield common_1.installDependencies(root, '--no-package-lock');
            if (postUpgrade) {
                common_1.logInfo(`Running postUpgrade script ...`);
                yield common_1.runScript(postUpgrade, root);
            }
            yield common_1.clearCache(root);
            common_1.logDone(`All done!`);
        }
        else {
            throw new Error(`Could not find a "piral" section in the "package.json" file. Aborting.`);
        }
    });
}
exports.upgradePilet = upgradePilet;
//# sourceMappingURL=upgrade-pilet.js.map