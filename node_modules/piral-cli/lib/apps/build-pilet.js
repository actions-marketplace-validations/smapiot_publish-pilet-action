"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Bundler = require("parcel-bundler");
const path_1 = require("path");
const common_1 = require("../common");
exports.buildPiletDefaults = {
    entry: './src/index',
    target: './dist/index.js',
    cacheDir: '.cache',
    detailedReport: false,
    minify: true,
    logLevel: 3,
    fresh: false,
    sourceMaps: true,
    contentHash: true,
    scopeHoist: false,
};
function buildPilet(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { entry = exports.buildPiletDefaults.entry, target = exports.buildPiletDefaults.target, detailedReport = exports.buildPiletDefaults.detailedReport, cacheDir = exports.buildPiletDefaults.cacheDir, minify = exports.buildPiletDefaults.minify, sourceMaps = exports.buildPiletDefaults.sourceMaps, contentHash = exports.buildPiletDefaults.contentHash, scopeHoist = exports.buildPiletDefaults.scopeHoist, logLevel = exports.buildPiletDefaults.logLevel, fresh = exports.buildPiletDefaults.fresh, } = options;
        const entryFiles = common_1.getFileWithExtension(path_1.join(baseDir, entry));
        const targetDir = path_1.dirname(entryFiles);
        const packageJson = yield common_1.findFile(targetDir, 'package.json');
        if (!packageJson) {
            throw new Error(`Cannot find the "package.json". You need a valid package.json for your pilet.`);
        }
        const root = path_1.dirname(packageJson);
        const externals = Object.keys(require(packageJson).peerDependencies);
        yield common_1.setStandardEnvs({
            production: true,
            target: targetDir,
        });
        const dest = {
            outDir: path_1.dirname(path_1.resolve(baseDir, target)),
            outFile: path_1.basename(target),
        };
        if (fresh) {
            yield common_1.clearCache(root, cacheDir);
            yield common_1.removeDirectory(dest.outDir);
        }
        common_1.modifyBundlerForPilet(Bundler.prototype, externals, targetDir);
        const bundler = new Bundler(entryFiles, common_1.extendConfig(Object.assign(Object.assign({}, dest), { cacheDir, watch: false, sourceMaps,
            minify,
            scopeHoist,
            contentHash, publicUrl: './', detailedReport,
            logLevel })));
        common_1.extendBundlerForPilet(bundler);
        common_1.extendBundlerWithPlugins(bundler);
        const bundle = yield bundler.bundle();
        yield common_1.postProcess(bundle);
        if (minify) {
            yield common_1.postTransform(bundle, root);
        }
    });
}
exports.buildPilet = buildPilet;
//# sourceMappingURL=build-pilet.js.map