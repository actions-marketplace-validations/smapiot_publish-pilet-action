"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Bundler = require("parcel-bundler");
const chalk_1 = require("chalk");
const fs_1 = require("fs");
const path_1 = require("path");
const kras_1 = require("kras");
const common_1 = require("../common");
function findEntryModule(entryFile, target) {
    const entry = path_1.basename(entryFile);
    const files = fs_1.readdirSync(target);
    for (const file of files) {
        const ext = path_1.extname(file);
        if (file === entry || file.replace(ext, '') === entry) {
            return path_1.join(target, file);
        }
    }
    return entryFile;
}
exports.debugPiletDefaults = {
    logLevel: 3,
    cacheDir: '.cache',
    entry: './src/index',
    fresh: false,
    open: false,
    port: 1234,
    scopeHoist: false,
    hmr: true,
    autoInstall: true,
};
const injectorName = path_1.resolve(__dirname, '../injectors/pilet.js');
function debugPilet(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { entry = exports.debugPiletDefaults.entry, port = exports.debugPiletDefaults.port, cacheDir = exports.debugPiletDefaults.cacheDir, open = exports.debugPiletDefaults.open, scopeHoist = exports.debugPiletDefaults.scopeHoist, hmr = exports.debugPiletDefaults.hmr, autoInstall = exports.debugPiletDefaults.autoInstall, logLevel = exports.debugPiletDefaults.logLevel, fresh = exports.debugPiletDefaults.fresh, app, } = options;
        const entryFile = path_1.join(baseDir, entry);
        const target = path_1.dirname(entryFile);
        const entryModule = findEntryModule(entryFile, target);
        const { peerDependencies, root, appPackage, appFile } = yield common_1.retrievePiletData(target, app);
        const externals = Object.keys(peerDependencies);
        const krasConfig = kras_1.readKrasConfig({ port }, kras_1.krasrc);
        if (krasConfig.directory === undefined) {
            krasConfig.directory = path_1.join(target, 'mocks');
        }
        if (krasConfig.ssl === undefined) {
            krasConfig.ssl = undefined;
        }
        if (krasConfig.map === undefined) {
            krasConfig.map = {};
        }
        if (krasConfig.api === undefined) {
            krasConfig.api = '/manage-mock-server';
        }
        if (krasConfig.injectors === undefined) {
            krasConfig.injectors = kras_1.defaultConfig.injectors;
        }
        if (fresh) {
            yield common_1.clearCache(root, cacheDir);
        }
        yield common_1.setStandardEnvs({
            target,
            piral: appPackage.name,
            dependencies: externals,
        });
        common_1.modifyBundlerForPilet(Bundler.prototype, externals, target);
        const bundler = new Bundler(entryModule, common_1.extendConfig({
            logLevel,
            hmr: false,
            minify: true,
            scopeHoist,
            publicUrl: './',
            cacheDir,
            autoInstall,
        }));
        const api = common_1.debugPiletApi;
        const injectorConfig = {
            active: true,
            bundler,
            port,
            root,
            app: path_1.dirname(appFile),
            handle: ['/', api],
            api,
        };
        common_1.extendBundlerForPilet(bundler);
        common_1.extendBundlerWithPlugins(bundler);
        bundler.on('bundled', (bundle) => __awaiter(this, void 0, void 0, function* () {
            yield common_1.postProcess(bundle);
            if (hmr) {
                bundler.emit('bundle-ready');
            }
        }));
        krasConfig.map['/'] = '';
        krasConfig.map[api] = '';
        krasConfig.injectors = Object.assign({ script: krasConfig.injectors.script || {
                active: true,
            }, [injectorName]: injectorConfig }, krasConfig.injectors);
        const krasServer = kras_1.buildKrasWithCli(krasConfig);
        krasServer.removeAllListeners('open');
        krasServer.on('open', svc => {
            const address = `${svc.protocol}://localhost:${chalk_1.default.green(svc.port)}`;
            console.log(`${common_1.liveIcon}  Running at ${chalk_1.default.bold(address)}.`);
            console.log(`${common_1.settingsIcon}  Manage via ${chalk_1.default.bold(address + krasConfig.api)}.`);
            bundler.bundle();
        });
        yield krasServer.start();
        common_1.openBrowser(open, port);
        yield new Promise(resolve => krasServer.on('close', resolve));
    });
}
exports.debugPilet = debugPilet;
//# sourceMappingURL=debug-pilet.js.map