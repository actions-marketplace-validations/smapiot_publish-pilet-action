"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Bundler = require("parcel-bundler");
const chalk_1 = require("chalk");
const path_1 = require("path");
const kras_1 = require("kras");
const common_1 = require("../common");
exports.debugPiralDefaults = {
    entry: './',
    cacheDir: '.cache',
    port: 1234,
    publicUrl: '/',
    logLevel: 3,
    fresh: false,
    open: false,
    scopeHoist: false,
    hmr: true,
    autoInstall: true,
};
const injectorName = path_1.resolve(__dirname, '../injectors/piral.js');
function debugPiral(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { entry = exports.debugPiralDefaults.entry, port = exports.debugPiralDefaults.port, cacheDir = exports.debugPiralDefaults.cacheDir, open = exports.debugPiralDefaults.open, scopeHoist = exports.debugPiralDefaults.scopeHoist, hmr = exports.debugPiralDefaults.hmr, autoInstall = exports.debugPiralDefaults.autoInstall, publicUrl = exports.debugPiralDefaults.publicUrl, logLevel = exports.debugPiralDefaults.logLevel, fresh = exports.debugPiralDefaults.fresh, } = options;
        const entryFiles = yield common_1.retrievePiralRoot(baseDir, entry);
        const { externals, name, root } = yield common_1.retrievePiletsInfo(entryFiles);
        const krasConfig = kras_1.readKrasConfig({ port }, kras_1.krasrc);
        if (krasConfig.directory === undefined) {
            krasConfig.directory = path_1.join(path_1.dirname(entryFiles), 'mocks');
        }
        if (krasConfig.ssl === undefined) {
            krasConfig.ssl = undefined;
        }
        if (krasConfig.map === undefined) {
            krasConfig.map = {};
        }
        if (krasConfig.api === undefined) {
            krasConfig.api = '/manage-mock-server';
        }
        if (krasConfig.injectors === undefined) {
            krasConfig.injectors = kras_1.defaultConfig.injectors;
        }
        if (fresh) {
            yield common_1.clearCache(root, cacheDir);
        }
        yield common_1.setStandardEnvs({
            target: path_1.dirname(entryFiles),
            dependencies: externals,
            piral: name,
        });
        common_1.modifyBundlerForPiral(Bundler.prototype, path_1.dirname(entryFiles));
        const bundler = new Bundler(entryFiles, common_1.extendConfig({ publicUrl, logLevel, cacheDir, scopeHoist, hmr, autoInstall }));
        const injectorConfig = {
            active: true,
            handle: ['/'],
            bundler,
        };
        common_1.extendBundlerForPiral(bundler);
        common_1.extendBundlerWithPlugins(bundler);
        krasConfig.map['/'] = '';
        krasConfig.injectors = Object.assign({ script: krasConfig.injectors.script || {
                active: true,
            }, [injectorName]: injectorConfig }, krasConfig.injectors);
        const krasServer = kras_1.buildKrasWithCli(krasConfig);
        krasServer.removeAllListeners('open');
        krasServer.on('open', svc => {
            const address = `${svc.protocol}://localhost:${chalk_1.default.green(svc.port)}`;
            console.log(`${common_1.liveIcon}  Running at ${chalk_1.default.bold(address)}.`);
            console.log(`${common_1.settingsIcon}  Manage via ${chalk_1.default.bold(address + krasConfig.api)}.`);
            bundler.bundle();
        });
        yield krasServer.start();
        common_1.openBrowser(open, port);
        yield new Promise(resolve => krasServer.on('close', resolve));
    });
}
exports.debugPiral = debugPiral;
//# sourceMappingURL=debug-piral.js.map