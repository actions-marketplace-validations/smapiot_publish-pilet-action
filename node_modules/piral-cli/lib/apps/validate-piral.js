"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../common");
const rules_1 = require("../rules");
exports.validatePiralDefaults = {
    entry: './',
    logLevel: 3,
};
function validatePiral(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { entry = exports.validatePiralDefaults.entry, logLevel = exports.validatePiralDefaults.logLevel } = options;
        const rules = yield rules_1.getPiralRules();
        const entryFiles = yield common_1.retrievePiralRoot(baseDir, entry);
        const _a = yield common_1.retrievePiletsInfo(entryFiles), { root, dependencies } = _a, info = __rest(_a, ["root", "dependencies"]);
        const errors = [];
        const warnings = [];
        yield common_1.runRules(rules, {
            error(message) {
                errors.push(message);
            },
            warning(message) {
                warnings.push(message);
            },
            logLevel,
            entry: entryFiles,
            dependencies: dependencies.std,
            devDependencies: dependencies.dev,
            peerDependencies: dependencies.peer,
            root,
            info,
        });
        common_1.ruleSummary(errors, warnings);
    });
}
exports.validatePiral = validatePiral;
//# sourceMappingURL=validate-piral.js.map